# Copyright 2023 SLSA Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "npm-publish"
description: "Publish package and provenance to npm"
inputs:
  maven-username:
    description: "Maven username"
    required: false
  maven-password:
    description: "Maven password"
    required: false
  gpg-key-pass:
    description: "gpg-key-pass."
    required: false
  gpg-private-key:
    description: "gpg-key-pass."
    required: false
runs:
  using: "composite"
  steps:
    - name: Set up Java for publishing to Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ inputs.gpg-private-key }}
          gpg-passphrase: GPG_KEY_PASS

#    - name: Create temp dir
#      id: temp-dir
#      shell: bash
#      run: |
#        set -euo pipefail
#
#        temp_dir=$(mktemp -d)
#        echo "path=${temp_dir}" >>"${GITHUB_OUTPUT}"

    - name: Download the target dir
      uses: actions/download-artifact@v3
      with:
        name: target
    - name: Download the slsa attestation
      uses: actions/download-artifact@v3
      with:
        name: slsa-attestations
        path: slsa-attestations

    # TODO(#1897): Use upstream version of npm
    - name: Publish to the Maven Central Repository
      shell: bash
      env:
        MAVEN_USERNAME: ${{ inputs.maven-username }}
        MAVEN_PASSWORD: ${{ inputs.maven-password }}
        GPG_KEY_PASS: ${{ inputs.gpg-key-pass }}
      run: |
        # Build and run custom plugin
          cd plugin && mvn clean install && cd ..
          # Re-indexing the secondary jar files for deploy
          mvn javadoc:jar source:jar
          # Retrieve project version
          VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
          # Reset the environment variables add in the base provenance
          FILES=slsa-attestations/test-java-project-$VERSION.jar.intoto.sigstore
          TYPES=sigstore
          CLASSIFIERS=jar.intoto
          # Find all necessary built jar files and attach them to the enviornment variable deploy
          for name in $(find ./ -name "test-java-project-$VERSION-*.jar")
          do
            TARGET=$(echo $name | rev | cut -d\- -f1 | rev)
            FILES=$FILES,$name
            TYPES=$TYPES,${TARGET##*.}
            CLASSIFIERS=$CLASSIFIERS,${TARGET%.*}
          done
          # Find all generated provenance files and attach them the the envionrment variable for deploy
          for name in $(find ./ -name "test-java-project-$VERSION-*.jar.intoto.sigstore")
          do
            TARGET=$(echo $name | rev | cut -d\- -f1 | rev)
            FILES=$FILES,$name
            TYPES=$TYPES",sigstore"
            CLASSIFIERS=$CLASSIFIERS,${TARGET::-9}
          done
          # Sign and deploy the files to the ossrh remote repository
          mvn validate jar:jar -Dfile=target/test-java-project-$VERSION.jar -Durl=https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/ -DrepositoryId=ossrh -Dfiles=$FILES -Dtypes=$TYPES -Dclassifiers=$CLASSIFIERS -DpomFile=pom.xml gpg:sign-and-deploy-file
